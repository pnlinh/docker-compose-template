version: "3.4"

services:
    app:
        image: pnlinh/php:81
        hostname: "${DOCKER_PREFIX_NAME}-app"
        container_name: "${DOCKER_PREFIX_NAME}-app"
        environment:
            PHP_IDE_CONFIG: serverName="${DOCKER_PREFIX_NAME}-app.docker.cli"
        extra_hosts:
            - host.docker.internal:host-gateway
        ports:
            - ${DOCKER_APP_PORT:-80}:80
        volumes:
            - ./../:/var/www/html
        networks:
            - localnet

    mysql:
        image: mysql:8.0
        container_name: "${DOCKER_PREFIX_NAME}-mysql"
        command: --default-authentication-plugin=mysql_native_password
        environment:
            MYSQL_ROOT_PASSWORD: "${DB_PASSWORD}"
            MYSQL_ROOT_HOST: "%"
            MYSQL_PASSWORD: "${DB_PASSWORD}"
            MYSQL_USER: "${DB_USERNAME}"
            MYSQL_DATABASE: "${DB_DATABASE}"
            MYSQL_ALLOW_EMPTY_PASSWORD: 1
        ports:
            - "${DOCKER_DB_PORT:-3306}:3306"
        volumes:
            - mysql-data:/var/lib/mysql
            - ../docker/database/mysql/create-testing-database.sh:/docker-entrypoint-initdb.d/10-create-testing-database.sh
        healthcheck:
            test: [ "CMD", "mysqladmin", "ping", "-p${DB_PASSWORD}" ]
            retries: 3
            timeout: 5s
        networks:
            - localnet

    pgsql:
        image: postgres:14
        container_name: "${DOCKER_PREFIX_NAME}-pgsql"
        environment:
            PGPASSWORD: "${DB_PASSWORD:-secret}"
            POSTGRES_DB: "${DB_DATABASE}"
            POSTGRES_USER: "${DB_USERNAME}"
            POSTGRES_PASSWORD: "${DB_PASSWORD:-secret}"
        ports:
            - "${FORWARD_DB_PORT:-5432}:5432"
        volumes:
            - pgsql-data:/var/lib/postgresql/data
            - ../docker/database/pgsql/create-testing-database.sql:/docker-entrypoint-initdb.d/10-create-testing-database.sql
        healthcheck:
            test: [ "CMD", "pg_isready", "-q", "-d", "${DB_DATABASE}", "-U", "${DB_USERNAME}" ]
            retries: 3
            timeout: 5s
        networks:
            - localnet

    mongodb:
        image: mongo
        container_name: "${DOCKER_PREFIX_NAME}-mongodb"
        ports:
            - "${DOCKER_MONGODB_PORT:-27017}:27017"
        environment:
            MONGO_INITDB_DATABASE: "${MONGO_DB_DATABASE:-laravel}"
            MONGO_INITDB_ROOT_USERNAME: "${MONGO_DB_USERNAME:-user}"
            MONGO_INITDB_ROOT_PASSWORD: "${MONGO_DB_PASSWORD:-secret}"
        volumes:
            - mongodb-data:/data/db
        #    healthcheck:
        #      test: echo 'db.runCommand("ping").ok' | mongo mongodb:27017/"${MONGO_DB_DATABASE}" --quiet
        #      interval: 10s
        #      retries: 3
        #      timeout: 5s
        #      start_period: 40s
        networks:
            - localnet

    redis:
        image: redis:alpine
        container_name: "${DOCKER_PREFIX_NAME}-redis"
        ports:
            - "${DOCKER_REDIS_PORT:-6379}:6379"
        volumes:
            - redis-data:/data
        healthcheck:
            test: [ "CMD", "redis-cli", "ping" ]
            retries: 3
            timeout: 5s
        networks:
            - localnet

    mailhog:
        image: mailhog/mailhog
        container_name: "${DOCKER_PREFIX_NAME}-mailhog"
        ports:
            - "${DOCKER_MAIL_PORT:-8025}:8025"
        healthcheck:
            test: [ "CMD", "echo | telnet 127.0.0.1 8025" ]
            retries: 3
            timeout: 5s
        networks:
            - localnet

    static:
        build:
            context: .
            dockerfile: docker/Dockerfile.nodejs
        image: pnlinh/static-builder
        container_name: static-builder

networks:
    localnet:
        driver: "bridge"
